const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/your_database', { useNewUrlParser: true, useUnifiedTopology: true });
const db = mongoose.connection;

// Define the schema for your product transactions
const productSchema = new mongoose.Schema({
  id: Number,
  title: String,
  price: Number,
  description: String,
  category: String,
  image: String,
  sold: Boolean,
  dateOfSale: Date,
});

const Product = mongoose.model('Product', productSchema);

// Helper function to get product count by price range
async function getProductCountByPriceRange(month, min, max) {
  try {
    // Count documents within the specified price range and month
    const count = await Product.countDocuments({
      dateOfSale: { $regex: new RegExp(`${month}-`, 'i') },
      price: { $gte: min, $lte: max },
    });

    return count;
  } catch (error) {
    console.error(error);
    throw new Error('Error counting products by price range');
  }
}

// API to initialize the database with seed data
app.get('/initialize-database', async (req, res) => {
  try {
    // Fetch data from the third-party API
    const response = await axios.get('https://s3.amazonaws.com/roxiler.com/product_transaction.json');
    const products = response.data;

    // Insert data into the database
    await Product.insertMany(products);

    res.json({ message: 'Database initialized with seed data.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// API to list all transactions with search and pagination
app.get('/list-transactions', async (req, res) => {
  const { page = 1, perPage = 10, search = '', month } = req.query;

  try {
    // Build query based on search parameters
    const query = search
      ? {
          $or: [
            { title: { $regex: search, $options: 'i' } },
            { description: { $regex: search, $options: 'i' } },
            { price: parseFloat(search) || 0 },
          ],
        }
      : {};

    // Fetch data with pagination and based on the selected month
    const transactions = await Product.find({
      ...query,
      dateOfSale: { $regex: new RegExp(`${month}-`, 'i') },
    })
      .skip((page - 1) * perPage)
      .limit(parseInt(perPage));

    res.json(transactions);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// API for statistics
app.get('/statistics', async (req, res) => {
  const { month } = req.query;

  try {
    // Calculate total sale amount, number of sold items, and number of not sold items for the selected month
    const totalSaleAmount = await Product.aggregate([
      { $match: { dateOfSale: { $regex: new RegExp(`${month}-`, 'i') } } },
      { $group: { _id: null, total: { $sum: '$price' } } },
    ]);

    const soldItems = await Product.countDocuments({
      dateOfSale: { $regex: new RegExp(`${month}-`, 'i') },
      sold: true,
    });

    const notSoldItems = await Product.countDocuments({
      dateOfSale: { $regex: new RegExp(`${month}-`, 'i') },
      sold: false,
    });

    res.json({
      totalSaleAmount: totalSaleAmount.length ? totalSaleAmount[0].total : 0,
      totalSoldItems: soldItems,
      totalNotSoldItems: notSoldItems,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// API for bar chart
app.get('/bar-chart', async (req, res) => {
  const { month } = req.query;

  try {
    // Generate price range distribution for the selected month
    const priceRanges = [
      { range: '0-100', count: await getProductCountByPriceRange(month, 0, 100) },
      { range: '101-200', count: await getProductCountByPriceRange(month, 101, 200) },
      // ... Repeat for other ranges
      { range: '901-above', count: await getProductCountByPriceRange(month, 901, Infinity) },
    ];

    res.json(priceRanges);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});



----++++++++++++++++++---------




// API to fetch data from all three APIs, combine responses, and send final response
app.get('/combined-data', async (req, res) => {
  const { month } = req.query;

  try {
    // Fetch data from list-transactions API
    const transactionsResponse = await axios.get(`/list-transactions?month=${month}`);
    const transactions = transactionsResponse.data;

    // Fetch data from statistics API
    const statisticsResponse = await axios.get(`/statistics?month=${month}`);
    const statistics = statisticsResponse.data;

    // Fetch data from bar-chart API
    const barChartResponse = await axios.get(`/bar-chart?month=${month}`);
    const barChart = barChartResponse.data;

    // Combine responses into a single JSON
    const combinedData = {
      transactions,
      statistics,
      barChart,
    };

    res.json(combinedData);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});
